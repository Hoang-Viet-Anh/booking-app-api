// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using booking_api.Context;

#nullable disable

namespace booking_api.Migrations
{
    [DbContext(typeof(BookingContext))]
    partial class BookingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("booking_api.Models.BookingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("RoomSizes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("booking_api.Models.WorkspaceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Amenities")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("MaxBookingDays")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workspace");
                });

            modelBuilder.Entity("booking_api.Models.BookingModel", b =>
                {
                    b.HasOne("booking_api.Models.WorkspaceModel", "workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("booking_api.Models.DateSlot", "DateSlot", b1 =>
                        {
                            b1.Property<Guid>("BookingModelId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsEndTimeSelected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsStartTimeSelected")
                                .HasColumnType("boolean");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("BookingModelId");

                            b1.ToTable("Booking");

                            b1.WithOwner()
                                .HasForeignKey("BookingModelId");
                        });

                    b.Navigation("DateSlot")
                        .IsRequired();

                    b.Navigation("workspace");
                });

            modelBuilder.Entity("booking_api.Models.WorkspaceModel", b =>
                {
                    b.OwnsOne("booking_api.Models.Availability", "Availability", b1 =>
                        {
                            b1.Property<Guid>("WorkspaceModelId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("WorkspaceModelId");

                            b1.ToTable("Workspace");

                            b1.WithOwner()
                                .HasForeignKey("WorkspaceModelId");

                            b1.OwnsMany("booking_api.Models.Room", "Rooms", b2 =>
                                {
                                    b2.Property<Guid>("AvailabilityWorkspaceModelId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("Capacity")
                                        .HasColumnType("integer");

                                    b2.Property<int>("RoomsAmount")
                                        .HasColumnType("integer");

                                    b2.HasKey("AvailabilityWorkspaceModelId", "Id");

                                    b2.ToTable("Room");

                                    b2.WithOwner()
                                        .HasForeignKey("AvailabilityWorkspaceModelId");
                                });

                            b1.Navigation("Rooms");
                        });

                    b.Navigation("Availability")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
